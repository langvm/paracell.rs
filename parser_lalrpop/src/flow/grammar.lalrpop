use std::str::FromStr;
use crate::flow::*;

grammar;

ListSucc<T, SPLIT>: T = SPLIT <e: T> => e;

List<T, SPLIT>: Vec<T> = <lead: T?> <succ: ListSucc<T, SPLIT>*> => {
	match lead {
		None => Vec::new(),
		Some(lead) => {
			let mut elems = Vec::new();
			elems.push(lead);
			elems.extend(succ);
			elems
		}
	}
};

pub Nat: Nat = {
	// 0
	"0" => Nat{val: 0},
	// 10
	<lit: r"[1-9]+[0-9]*"> => Nat{val: u128::from_str(lit).unwrap()},
	// 0xff
	<lit: r"0x[0-9A-F]*"> => Nat{val: u128::from_str_radix(&lit[2..lit.len()], 16).unwrap()},
	// 07
	<lit: r"0o[0-7]*"> => Nat{val: u128::from_str_radix(&lit[2..lit.len()], 8).unwrap()},
	// 0b1001
	<lit: r"0b[0-1]*"> => Nat{val: u128::from_str_radix(&lit[2..lit.len()], 2).unwrap()},
}

// regfile_a0
pub Ident: Ident = <ident: r"[a-zA-Z_]+[a-zA-Z0-9_]*"> => Ident{lit: ident.to_string()};

Tuple: Tuple = "(" <elems: List<Item, ",">> ")" => Tuple{elems};

UnaryOperator: UnaryOperator = {
	"~" => UnaryOperator::Invert,
}

BinaryOperator: BinaryOperator = {
	"+" => BinaryOperator::Add,
	"-" => BinaryOperator::Sub,
	"*" => BinaryOperator::Mul,
	"/" => BinaryOperator::Div,
	"%" => BinaryOperator::Mod,

	"and" => BinaryOperator::And,
	"or" => BinaryOperator::Or,

	"|>" => BinaryOperator::Pipe,
}

TypedIdent: TypedIdent = <ident: Ident> ":" <ty: Item> => TypedIdent{ident, ty};

RecordType: RecordType = "record" "{" <fields: List<TypedIdent, ",">> "}" => RecordType{fields};

UnionType: UnionType = "union" "{" <variants: List<TypedIdent, ",">> "}" => UnionType{variants};

Func: Func = "fun" "(" <params: List<TypedIdent, ",">> ")" "->" <result: Item> <block: Block> => Func{params, result, block};

Block: Block = "{" <elems: List<Item, ";">> "}" => Block{elems};

TypeTuple: TypeTuple = "[" <elems: List<Item, ",">> "]" => TypeTuple{elems};

Pattern: Pattern = <pattern: Item> "=>" <expr: Item> => Pattern{pattern, expr};

Match: Match = "match" <expr: Item> "{" <patterns: List<Pattern, ",">> "}" => Match{expr, patterns};

pub Item: Item = {
	#[precedence(level = "0")]
	<v: Nat> => Item::Nat(v),
	#[precedence(level = "0")]
	<v: Ident> => Item::Ident(v),
	#[precedence(level = "0")]
	<v: Tuple> => Item::Tuple(v),
	#[precedence(level = "0")]
	<v: Block> => Item::Block(Box::from(v)),
	#[precedence(level = "0")]
	<v: Func> => Item::Func(Box::from(v)),
	#[precedence(level = "0")]
	<v: Match> => Item::Match(Box::from(v)),
	#[precedence(level = "0")]
	<v: TypeTuple> => Item::TypeTuple(Box::from(v)),

	#[precedence(level = "0")]
	<v: RecordType> => Item::RecordType(Box::from(v)),
	#[precedence(level = "0")]
	<v: UnionType> => Item::UnionType(Box::from(v)),

	#[precedence(level = "1")]
	<op: UnaryOperator> <expr: Item> => Item::UnaryOpExpr(Box::from(UnaryOpExpr{op, expr})),
	#[precedence(level = "2")]
	#[assoc(side = "left")]
	<left: Item> <op: BinaryOperator> <right: Item> => Item::BinaryOpExpr(Box::from(BinaryOpExpr{op, left, right})),
	#[precedence(level = "2")]
	#[assoc(side = "left")]
	<func: Item> <params: Tuple> => Item::ApplyExpr(Box::from(ApplyExpr{func, params})),

	#[precedence(level = "3")]
	#[assoc(side = "left")]
	"let" <ident: Ident> "=" <expr: Item>  => Item::LetDecl(Box::from(LetDecl{ident, expr})),
	#[precedence(level = "3")]
	#[assoc(side = "left")]
	"var" <ident: Ident> "=" <expr: Item> => Item::VarDecl(Box::from(VarDecl{ident, expr})),
	#[precedence(level = "3")]
	#[assoc(side = "left")]
	"type" <ident: Ident> "=" <ty: Item> => Item::TypeAliasDecl(Box::from(TypeAliasDecl{ident, ty})),
}
